//go:generate go run -tags generate gen.go

package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strconv"
	"strings"
	"sync"

	"github.com/sqweek/dialog"
	"github.com/zserge/lorca"
)

//Contains 0x3D items
var stashAndInventory = []byte{ //Runes, Gems, Cube, Facets, and skillers
	0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x00, 0x22, 0xf6, 0x86, 0x07, 0x82, 0x66, 0x07,
	0xb3, 0x88, 0x86, 0xe0, 0x3f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x00, 0x2a, 0x07,
	0x13, 0x33, 0x07, 0x2a, 0x8e, 0x22, 0xed, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80,
	0x00, 0x65, 0x00, 0x20, 0x2a, 0x07, 0x23, 0x33, 0x07, 0x7d, 0x14, 0xea, 0xb0, 0x80, 0x20, 0xc0,
	0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x40, 0x2a, 0x07, 0x33, 0x33, 0x07, 0x39,
	0xa8, 0x5d, 0xc6, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x60,
	0x2a, 0x07, 0x43, 0x33, 0x87, 0xd1, 0x0d, 0xff, 0xea, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10,
	0x00, 0x80, 0x00, 0x65, 0x00, 0x80, 0x2a, 0x07, 0x53, 0x33, 0x87, 0x67, 0x9c, 0x01, 0x90, 0x80,
	0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0xa0, 0x2a, 0x07, 0x63, 0x33,
	0x87, 0xcc, 0xd2, 0xc8, 0xeb, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65,
	0x00, 0xc0, 0x2a, 0x07, 0x73, 0x33, 0x07, 0xc5, 0x75, 0xa4, 0x89, 0x80, 0x20, 0xc0, 0x7f, 0x4a,
	0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0xe0, 0x2a, 0x07, 0x83, 0x33, 0x87, 0x9f, 0x23, 0xfc,
	0xa5, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x00, 0x2b, 0x07,
	0x93, 0x33, 0x07, 0x95, 0xb1, 0x9a, 0xa2, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80,
	0x00, 0x65, 0x00, 0x20, 0x2b, 0x17, 0x03, 0x33, 0x07, 0xbd, 0x34, 0xf8, 0xfe, 0x80, 0x20, 0xc0,
	0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x40, 0x2b, 0x17, 0x13, 0x33, 0x07, 0xfc,
	0x11, 0x6d, 0x89, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x60,
	0x2b, 0x17, 0x23, 0x33, 0x07, 0x86, 0x7c, 0x35, 0x81, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10,
	0x00, 0x80, 0x00, 0x65, 0x00, 0x80, 0x2b, 0x17, 0x33, 0x33, 0x07, 0x14, 0x08, 0x4e, 0xf9, 0x80,
	0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0xa0, 0x2b, 0x17, 0x43, 0x33,
	0x87, 0xae, 0x37, 0xeb, 0x99, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65,
	0x00, 0xc0, 0x2b, 0x17, 0x53, 0x33, 0x07, 0xe4, 0x0a, 0x67, 0xd2, 0x80, 0x20, 0xc0, 0x7f, 0x4a,
	0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x02, 0x2a, 0x17, 0x63, 0x33, 0x07, 0x13, 0xe4, 0xb3,
	0x93, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x22, 0x2a, 0x17,
	0x73, 0x33, 0x87, 0xb3, 0x15, 0xc0, 0xc6, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80,
	0x00, 0x65, 0x00, 0x42, 0x2a, 0x17, 0x83, 0x33, 0x87, 0xcd, 0x5d, 0x99, 0xac, 0x80, 0x20, 0xc0,
	0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x62, 0x2a, 0x17, 0x93, 0x33, 0x87, 0x82,
	0x10, 0x2e, 0xbd, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x82,
	0x2a, 0x27, 0x03, 0x33, 0x07, 0x66, 0x73, 0x30, 0x9d, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10,
	0x00, 0x80, 0x00, 0x65, 0x00, 0xa2, 0x2a, 0x27, 0x13, 0x33, 0x87, 0x9b, 0x1d, 0x3b, 0xc4, 0x80,
	0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0xc2, 0x2a, 0x27, 0x23, 0x33,
	0x87, 0x37, 0x2a, 0x84, 0xb4, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65,
	0x00, 0xe2, 0x2a, 0x27, 0x33, 0x33, 0x07, 0xb7, 0xe0, 0xc7, 0xce, 0x80, 0x20, 0xc0, 0x7f, 0x4a,
	0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x02, 0x2b, 0x27, 0x43, 0x33, 0x07, 0x35, 0x0a, 0x6b,
	0x9b, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x22, 0x2b, 0x27,
	0x53, 0x33, 0x07, 0x56, 0x4d, 0xac, 0x86, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80,
	0x00, 0x65, 0x00, 0x42, 0x2b, 0x27, 0x63, 0x33, 0x07, 0x3d, 0xc2, 0x00, 0xe7, 0x80, 0x20, 0xc0,
	0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x62, 0x2b, 0x27, 0x73, 0x33, 0x87, 0x09,
	0x4e, 0x2d, 0xd3, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x82,
	0x2b, 0x27, 0x83, 0x33, 0x87, 0x2c, 0x55, 0xaa, 0x83, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10,
	0x00, 0x80, 0x00, 0x65, 0x00, 0xa2, 0x2b, 0x27, 0x93, 0x33, 0x87, 0x5a, 0xe9, 0x39, 0xb1, 0x80,
	0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0xc2, 0x2b, 0x37, 0x03, 0x33,
	0x87, 0xaa, 0xb0, 0xba, 0xb2, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65,
	0x00, 0x04, 0x2a, 0x37, 0x13, 0x33, 0x87, 0x66, 0x63, 0xa4, 0xee, 0x80, 0x20, 0xc0, 0x7f, 0x4a,
	0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x24, 0x2a, 0x37, 0x23, 0x33, 0x07, 0x79, 0xda, 0x10,
	0xe3, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x44, 0x2a, 0x37,
	0x33, 0x33, 0x07, 0xf9, 0x1e, 0xdb, 0xb8, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80,
	0x00, 0x65, 0x00, 0x64, 0x3a, 0xb7, 0xa6, 0x37, 0x07, 0xeb, 0x63, 0x3f, 0xb5, 0x80, 0x20, 0xc0,
	0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x84, 0x7a, 0x06, 0x27, 0x37, 0x87, 0x06,
	0x89, 0xea, 0xa7, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0xa4,
	0x7a, 0x06, 0x77, 0x36, 0x07, 0xfe, 0xa0, 0xa6, 0x9c, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10,
	0x00, 0x80, 0x00, 0x65, 0x00, 0xc4, 0x7a, 0x06, 0x77, 0x37, 0x07, 0xb8, 0x93, 0xa7, 0xd8, 0x80,
	0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0xe4, 0x7a, 0x06, 0x67, 0x37,
	0x07, 0xe2, 0xe6, 0xc9, 0xd7, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65,
	0x00, 0x04, 0x7b, 0x06, 0x27, 0x36, 0x87, 0x6b, 0x64, 0xc3, 0xe9, 0x80, 0x20, 0xc0, 0x7f, 0x4a,
	0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x24, 0x7b, 0x06, 0x97, 0x37, 0x87, 0xc5, 0xe3, 0x03,
	0xa2, 0x80, 0x20, 0xc0, 0x7f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x06, 0xaa, 0x56,
	0x76, 0x07, 0x02, 0x2d, 0x88, 0xd7, 0xd6, 0xf1, 0x15, 0xc7, 0x00, 0x23, 0x82, 0x16, 0x8e, 0x75,
	0x2e, 0x90, 0x93, 0xde, 0x68, 0x5a, 0xf0, 0x1f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00,
	0x08, 0xaa, 0x56, 0x76, 0x07, 0x02, 0x2d, 0x88, 0xd7, 0xd6, 0xf1, 0x15, 0xc7, 0x00, 0x23, 0x82,
	0x16, 0x8e, 0x75, 0x2e, 0x90, 0x93, 0xde, 0x68, 0x5a, 0xf0, 0x1f, 0x4a, 0x4d, 0x10, 0x00, 0x80,
	0x00, 0x65, 0x00, 0x0a, 0xaa, 0x56, 0x76, 0x07, 0x02, 0x2d, 0x88, 0xd7, 0xd6, 0xf1, 0x15, 0xc7,
	0x00, 0x23, 0x82, 0x16, 0x8e, 0x75, 0x2e, 0x90, 0x93, 0xde, 0x68, 0x5a, 0xf0, 0x1f, 0x4a, 0x4d,
	0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x26, 0xaa, 0x56, 0x76, 0x07, 0x02, 0x22, 0x1d, 0x6c, 0xb5,
	0xf1, 0x85, 0xc6, 0x60, 0x03, 0xc3, 0xc4, 0xc0, 0xb1, 0x95, 0x05, 0xf2, 0xd2, 0x1b, 0x4f, 0x0b,
	0xfe, 0x03, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x28, 0xaa, 0x56, 0x76, 0x07, 0x02,
	0x22, 0x1d, 0x6c, 0xb5, 0xf1, 0x85, 0xc6, 0x60, 0x03, 0xc3, 0xc4, 0xc0, 0xb1, 0x95, 0x05, 0xf2,
	0xd2, 0x1b, 0x4f, 0x0b, 0xfe, 0x03, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x2a, 0xaa,
	0x56, 0x76, 0x07, 0x02, 0x22, 0x1d, 0x6c, 0xb5, 0xf1, 0x85, 0xc6, 0x60, 0x03, 0xc3, 0xc4, 0xc0,
	0xb1, 0x95, 0x05, 0xf2, 0xd2, 0x1b, 0x4f, 0x0b, 0xfe, 0x03, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00,
	0x65, 0x00, 0x46, 0xaa, 0x56, 0x76, 0x07, 0x82, 0xab, 0x58, 0x5f, 0xbf, 0xf1, 0x1d, 0xc6, 0x20,
	0x23, 0x00, 0x25, 0x8e, 0xa5, 0x30, 0x90, 0x95, 0xde, 0x70, 0x5a, 0xf0, 0x1f, 0x4a, 0x4d, 0x10,
	0x00, 0x80, 0x00, 0x65, 0x00, 0x48, 0xaa, 0x56, 0x76, 0x07, 0x82, 0xab, 0x58, 0x5f, 0xbf, 0xf1,
	0x1d, 0xc6, 0x20, 0x23, 0x00, 0x25, 0x8e, 0xa5, 0x30, 0x90, 0x95, 0xde, 0x70, 0x5a, 0xf0, 0x1f,
	0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x4a, 0xaa, 0x56, 0x76, 0x07, 0x82, 0xab, 0x58,
	0x5f, 0xbf, 0xf1, 0x1d, 0xc6, 0x20, 0x23, 0x00, 0x25, 0x8e, 0xa5, 0x30, 0x90, 0x95, 0xde, 0x70,
	0x5a, 0xf0, 0x1f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00, 0x66, 0xaa, 0x56, 0x76, 0x07,
	0x02, 0x55, 0xe0, 0x8e, 0xea, 0xf1, 0x85, 0xc5, 0x90, 0x63, 0x17, 0xd8, 0x05, 0x64, 0x14, 0x9b,
	0xb9, 0x20, 0x33, 0xbd, 0x01, 0xb5, 0xe0, 0x3f, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x65, 0x00,
	0x68, 0xaa, 0x56, 0x76, 0x07, 0x02, 0x55, 0xe0, 0x8e, 0xea, 0xf1, 0x85, 0xc5, 0x90, 0x63, 0x17,
	0xd8, 0x05, 0x64, 0x14, 0x9b, 0xb9, 0x20, 0x33, 0xbd, 0x01, 0xb5, 0xe0, 0x3f, 0x4a, 0x4d, 0x10,
	0x00, 0x80, 0x00, 0x65, 0x00, 0x6a, 0xaa, 0x56, 0x76, 0x07, 0x02, 0x55, 0xe0, 0x8e, 0xea, 0xf1,
	0x85, 0xc5, 0x90, 0x63, 0x17, 0xd8, 0x05, 0x64, 0x14, 0x9b, 0xb9, 0x20, 0x33, 0xbd, 0x01, 0xb5,
	0xe0, 0x3f, 0x4a, 0x4d, 0x10, 0x00, 0xa0, 0x00, 0x64, 0x00, 0x12, 0x4a, 0xf7, 0x16, 0x06, 0x02,
	0x4a, 0x4d, 0x10, 0x00, 0xa0, 0x00, 0x64, 0x00, 0x32, 0x4a, 0xf7, 0x16, 0x06, 0x02, 0x4a, 0x4d,
	0x10, 0x00, 0xa0, 0x00, 0x64, 0x00, 0x52, 0x4a, 0xf7, 0x16, 0x06, 0x02, 0x4a, 0x4d, 0x10, 0x00,
	0x80, 0x00, 0x64, 0x00, 0xe0, 0x32, 0xd6, 0x16, 0x03, 0x02, 0xb8, 0x68, 0xe0, 0x48, 0xed, 0x84,
	0xf8, 0xd3, 0xff, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x64, 0x00, 0xe2, 0x32, 0xd6, 0x16, 0x03,
	0x82, 0xe0, 0xec, 0xf3, 0x66, 0xed, 0x84, 0xf8, 0xc3, 0xff, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00,
	0x64, 0x00, 0xe4, 0x32, 0xd6, 0x16, 0x03, 0x02, 0xa9, 0x09, 0xe2, 0x0c, 0xed, 0x84, 0xf8, 0xb3,
	0xff, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x64, 0x00, 0xe6, 0x32, 0xd6, 0x16, 0x03, 0x82, 0xd1,
	0x63, 0x4d, 0x51, 0xed, 0x84, 0xf8, 0xa3, 0xff, 0x4a, 0x4d, 0x10, 0x00, 0x80, 0x00, 0x64, 0x00,
	0xe8, 0x32, 0xd6, 0x16, 0x03, 0x02, 0x29, 0x2f, 0x9f, 0x7b, 0xed, 0x84, 0xf8, 0x93, 0xff}

var skillsAttributesWaypointsAndQuests = []byte{
	0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0x00, 0x80, 0x87, 0x01, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x6F, 0x6F, 0x21, 0x06, 0x00, 0x00, 0x00, 0x2A,
	0x01, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01,
	0x00, 0x01, 0x00, 0x1D, 0x90, 0x79, 0x1C, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xE5, 0x1F, 0x01,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD,
	0x9F, 0xFD, 0x9F, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01,
	0x00, 0x01, 0x00, 0x1D, 0x90, 0x79, 0x1C, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xE5, 0x1F, 0x01,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD,
	0x9F, 0xFD, 0x9F, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01,
	0x00, 0x01, 0x00, 0x1D, 0x90, 0x79, 0x1C, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xE5, 0x1F, 0x01,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01,
	0x00, 0x01, 0x00, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x9F, 0xED, 0x9F, 0xFD, 0x9F, 0xFD, 0x9F, 0xFD,
	0x9F, 0xFD, 0x9F, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x57, 0x53, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x02, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x77, 0x34, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x66, 0x00, 0x28, 0x08, 0xF0, 0x80, 0x80, 0x0C, 0x06, 0x50,
	0x40, 0x80, 0xBE, 0x02, 0x6E, 0x06, 0x00, 0x64, 0xC0, 0x01, 0x00, 0x19, 0x80, 0x00, 0xC0, 0x01,
	0x24, 0x00, 0x70, 0x00, 0x0A, 0x00, 0xA8, 0xC0, 0x02, 0x00, 0x2A, 0xC0, 0x60, 0xDC, 0xC0, 0xF0,
	0xCA, 0x3A, 0xDA, 0x01, 0xC4, 0x09, 0x80, 0x07, 0xA0, 0x25, 0x26, 0xFE, 0x03, 0x69, 0x66, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

// Go types that are bound to the UI must be thread-safe, because each binding
// is executed in its own goroutine. In this simple case we may use atomic
// operations, but for more complex cases one should use proper synchronization.
type SelectedSlot struct {
	sync.Mutex
	slotid string
}

func (s *SelectedSlot) selectSlot(id string) {
	s.Lock()
	defer s.Unlock()
	s.slotid = id
	log.Println("selected slot: ", id)
}

func (s *SelectedSlot) Value() string {
	s.Lock()
	defer s.Unlock()
	return s.slotid
}

func (s *SelectedSlot) getSelectionHtml() string {
	s.Lock()
	defer s.Unlock()

	if s.slotid == "" {
		return ""
	}

	var selectedPath = g_SelectedItems[g_SelectedSlot.slotid].selectedPath

	var sectionsHtml = ""
	for _, section := range g_SelectedItems[g_SelectedSlot.slotid].sections {
		if section.classRestriction != 0xFF && section.classRestriction != g_SelectedClass.value {
			continue
		}

		sectionsHtml += "<optgroup label=\"" + section.sectionName + "\">"

		var files = getFilesWithExt(section.folder, ".d2i")

		for _, file := range files {
			var filePath = section.folder + "/" + file
			var selected = ""
			if selectedPath == filePath {
				selected = "selected"
			}

			sectionsHtml += "<option value=\"" + filePath + "\" " + selected + ">" + strings.TrimSuffix(file, path.Ext(file)) + "</option>"
		}

		sectionsHtml += "</optgroup>"
	}

	var selectedNone = ""
	if selectedPath == "" {
		selectedNone = "selected"
	}

	var html = "<option value=''" + selectedNone + ">None</option>"
	html += sectionsHtml

	return html
}

type SelectedClass struct {
	sync.Mutex
	value byte
}

func (s *SelectedClass) selectClass(val int) {
	s.Lock()
	defer s.Unlock()
	s.value = byte(val)
	log.Println("selected class: ", val)
}

type ItemSection struct {
	classRestriction byte
	sectionName      string
	folder           string
}

type ItemSlot struct {
	sync.Mutex
	sections     []ItemSection
	selectedPath string
	d2slotvalue  byte
}

func (s *ItemSlot) selectItem(path string) {
	s.Lock()
	defer s.Unlock()
	s.selectedPath = path
	log.Println("selected item: ", s.selectedPath)
}

var g_SelectedSlot = &SelectedSlot{}
var g_SelectedClass = &SelectedClass{}
var g_SelectedItems = make(map[string]*ItemSlot)
var g_CharacterName = ""
var g_SavePath = "custom_hero.d2s"
var g_WorkingDirectory string

func min(a uint32, b uint32) uint32 {
	if a < b {
		return a
	}
	return b
}

func reverseBits(num byte) byte {
	num = ((num & 0xf0) >> 4) | ((num & 0x0f) << 4)
	num = ((num & 0xcc) >> 2) | ((num & 0x33) << 2)
	num = ((num & 0xaa) >> 1) | ((num & 0x55) << 1)
	return num
}

//Easy way to have 505 max quantity on all rune and gem stacks
func setQuantityOfRunesAndGems(itemList *[]byte) {
	var size = len(*itemList)

	for i, byt := range *itemList {
		if i+2 < size && byt == 0x20 && (*itemList)[i+1] == 0xC0 && (*itemList)[i+2] == 0x7f {
			(*itemList)[i+1] = 0xFF
		}
	}
}

func writeBits(buf []byte, start uint32, size uint32, value byte) uint32 {
	var realsize = size - 1
	var startindex = uint32(start / 8)
	var endindex = uint32((start + realsize) / 8)

	var bytestart = uint32(start % 8)

	//fmt.Printf("start %d\n", start)
	//fmt.Printf("startindex %d\n", startindex)
	//fmt.Printf("endindex %d\n", endindex)

	if startindex == endindex {
		//fmt.Printf("buf %08b\n", buf[startindex])

		var mask = byte(0xFF >> bytestart)
		//fmt.Printf("mask1 %08b\n", mask)

		mask = reverseBits(mask & ^((1 << (8 - (bytestart + size))) - 1))
		//fmt.Printf("mask2 %08b\n", mask)

		buf[startindex] = buf[startindex] & (^mask)
		//fmt.Printf("buf - mask %08b\n", buf[startindex])

		value = byte(value << bytestart)
		//fmt.Printf("value %08b\n", value)

		buf[startindex] = buf[startindex] | (byte(value) & mask)
		//fmt.Printf("buf + value %08b\n", buf[startindex])
	} else {
		//fmt.Printf("First Part\n")
		//fmt.Printf("buf %08b\n", buf[startindex])

		var mask = reverseBits(byte((0xFF >> bytestart) & ^((1 << (8 - min(bytestart+size, 8))) - 1)))
		//fmt.Printf("mask %08b\n", mask)

		buf[startindex] = buf[startindex] & ^(mask)
		//fmt.Printf("buf - mask %08b\n", buf[startindex])

		var valuea = byte(value << bytestart)
		//fmt.Printf("value %08b -> %08b\n", value, valuea)

		buf[startindex] = buf[startindex] | (byte(valuea) & mask)
		//fmt.Printf("buf + value %08b\n", buf[startindex])

		//fmt.Printf("Second Part\n")
		//fmt.Printf("buf %08b\n", buf[endindex])

		var mask2 = reverseBits(byte((0xFF) & ^((1 << (16 - (bytestart + size))) - 1)))
		//fmt.Printf("mask %08b\n", mask2)

		buf[endindex] = buf[endindex] & ^(mask2)
		//fmt.Printf("buf - mask %08b\n", buf[endindex])

		var valueb = byte(value >> (8 - bytestart))
		//fmt.Printf("value %08b -> %08b\n", value, valueb)

		buf[endindex] = buf[endindex] | (byte(valueb) & mask2)
		//fmt.Printf("buf + value %08b\n", buf[endindex])
	}

	return 0
}

func addItemToFile(buf *bytes.Buffer, slot *ItemSlot) error {
	if slot.selectedPath == "" {
		return nil
	}

	data, err := ioutil.ReadFile(g_WorkingDirectory + "/" + slot.selectedPath)
	if err != nil {
		fmt.Println(err)
		return err
	}

	fmt.Println("================================")
	fmt.Println("Writing " + slot.selectedPath)
	fmt.Println("= Set item As Equipped =========")
	writeBits(data, 58, 3, 1)
	fmt.Println("= Put item in correct Slot =====")
	writeBits(data, 61, 4, slot.d2slotvalue)
	fmt.Println("= Remove item from inventory ===")
	writeBits(data, 73, 3, 0)
	fmt.Println("================================")

	buf.Write(data)

	return nil
}

func saveAs() bool {
	file, err := dialog.File().Title("Save As").Filter("Diablo 2 Save File", "d2s").Save()

	if err != nil {
		fmt.Println("Error:", err)
		return false
	}

	if !strings.HasSuffix(file, ".d2s") {
		file += ".d2s"
	}

	characterName, nameerr := getCharacterName(file)
	if nameerr != nil {
		dialog.Message(nameerr.Error()).Error()
		return false
	}

	g_CharacterName = characterName
	g_SavePath = file
	generateSaveFile(g_SavePath, g_CharacterName)

	return true
}

func save() {
	generateSaveFile(g_SavePath, g_CharacterName)
}

func generateSaveFile(savePathArg string, characterName string) {
	var nameByteArray = []byte(characterName)
	var nullBytesToAdd = 16 - len(characterName)
	for i := 0; i < nullBytesToAdd; i++ {
		nameByteArray = append(nameByteArray, 0x00)
	}

	if len(nameByteArray) != 16 {
		fmt.Println("Error, the name array is not exactly 16 bytes long, it is " + strconv.Itoa(len(nameByteArray)))
		return
	}

	save := new(bytes.Buffer)
	save.Write([]byte{0x55, 0xAA, 0x55, 0xAA}) //File Header
	save.Write([]byte{0x60, 0x00, 0x00, 0x00}) //File Version
	save.Write([]byte{0x00, 0x00, 0x00, 0x00}) //File Size
	save.Write([]byte{0x00, 0x00, 0x00, 0x00}) //File CRC
	save.Write([]byte{0x00, 0x00, 0x00, 0x00}) //Weapon Set
	save.Write(nameByteArray)                  //Character Name
	save.Write([]byte{0x20})                   //Character Type
	save.Write([]byte{0x0F})                   //Character Title
	save.Write([]byte{0x00, 0x00})             //Unknown
	save.Write([]byte{g_SelectedClass.value})  //0 Amazon  1 Sorceress  2 Necromancer  3 Paladin  4 Barbarian  5 Druid  6 Assassin
	save.Write([]byte{0x10, 0x21})             //Unknown
	save.Write([]byte{0x63})                   //level 99
	save.Write([]byte{0x00, 0x00, 0x00, 0x00}) //Unknown
	save.Write([]byte{0x27, 0xAB, 0xB0, 0x5F}) //TimeStamp
	save.Write([]byte{0xFF, 0xFF, 0xFF, 0xFF}) //Unknown
	save.Write(skillsAttributesWaypointsAndQuests)
	save.Write([]byte{0x4A, 0x4D}) //Item list header

	var numberItems = 0x3D //We start at 0x3D because of the starting stash and inventory
	for _, ite := range g_SelectedItems {
		if ite.selectedPath != "" {
			numberItems++
		}
	}

	save.Write([]byte{byte(numberItems), 0x00}) //Number of items owned

	for _, ite := range g_SelectedItems {
		var err = addItemToFile(save, ite)
		if err != nil {
			dialog.Message(err.Error()).Error()
			return
		}
	}

	save.Write(stashAndInventory)
	save.Write([]byte{0x4A, 0x4D, 0x00, 0x00, 0x6A, 0x66, 0x6B, 0x66, 0x00}) //Corpse and other stuff

	//Write File Size
	binary.LittleEndian.PutUint32(save.Bytes()[8:], uint32(save.Len()))

	//Generate Checksum
	var sum int32 = 0
	for _, byt := range save.Bytes() {
		var bytcopy int32 = int32(byt)
		if sum < 0 {
			bytcopy += 1
		}
		sum = bytcopy + (sum * 2)
	}

	binary.LittleEndian.PutUint32(save.Bytes()[12:], uint32(sum))

	f, err := os.Create(savePathArg)
	if err != nil {
		fmt.Println(err)
		return
	}

	n2, err := f.Write(save.Bytes())
	if err != nil {
		fmt.Println(err)
		f.Close()
		return
	}

	fmt.Println(n2, "bytes written successfully to "+savePathArg)
	err = f.Close()
	if err != nil {
		fmt.Println(err)
		return
	}
}

func getFilesWithExt(folder string, ext string) []string {
	files, err := ioutil.ReadDir(g_WorkingDirectory + "/" + folder)
	if err != nil {
		log.Fatal(err)
	}

	var validFiles []string
	for _, f := range files {
		if !f.IsDir() {
			if filepath.Ext(f.Name()) == ext {
				validFiles = append(validFiles, f.Name())
			}
		}
	}

	fmt.Println(validFiles)

	return validFiles
}

func selectItem(item string) {
	g_SelectedItems[g_SelectedSlot.slotid].selectItem(item)
}

func getItemName(slot string) string {
	var name = filepath.Base(strings.TrimSuffix(g_SelectedItems[slot].selectedPath, path.Ext(g_SelectedItems[slot].selectedPath)))
	if name == "." {
		return ""
	}

	return name
}

func getCharacterName(filename string) (string, error) {
	var name = filepath.Base(strings.TrimSuffix(filename, path.Ext(filename)))
	const err string = "Remember the rules for Diablo II character names: \r\n" +
		"2-15 characters, containing only upper and " +
		"lower case letters (A-Z), with the possible addition of one dash ( - ) or " +
		"underscore ( _ ) as long as it is not the first or last character of the name."

	if len(name) == 1 {
		fmt.Println("NameError 1")
		return "", errors.New(err)
	}

	if len(name) > 15 {
		fmt.Println("NameError 2")
		return "", errors.New(err)
	}

	if strings.HasPrefix(name, "_") || strings.HasPrefix(name, "-") ||
		strings.HasSuffix(name, "_") || strings.HasSuffix(name, "-") {
		fmt.Println("NameError 3")
		return "", errors.New(err)
	}

	if strings.Count(name, "-")+strings.Count(name, "_") > 1 {
		fmt.Println("NameError 4")
		return "", errors.New(err)
	}

	matched, _ := regexp.MatchString(`^[a-zA-Z\-_]+$`, name)
	if !matched {
		fmt.Println("NameError 5")
		return "", errors.New(err)
	}

	return name, nil
}

func main() {

	//Saving the working dir on startup because the save dialog messes with it
	var err error
	g_WorkingDirectory, err = os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	setQuantityOfRunesAndGems(&stashAndInventory)

	args := []string{}
	if runtime.GOOS == "linux" {
		args = append(args, "--class=Lorca")
	}
	ui, err := lorca.New("", "./chromedata", 570, 812, args...)
	if err != nil {
		log.Fatal(err)
	}
	defer ui.Close()

	// A simple way to know when UI is ready (uses body.onload event in JS)
	ui.Bind("start", func() {
		log.Println("UI is ready")
		ui.Eval(`
			render();
		`)
	})

	ln, err := net.Listen("tcp", "127.0.0.1:0")
	if err != nil {
		log.Fatal(err)
	}
	defer ln.Close()
	go http.Serve(ln, http.FileServer(FS))

	//Initialize item map
	g_SelectedItems["head"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 4,
				sectionName:      "Barbarian Helms",
				folder:           "./inventory/head/barbarian",
			},
			{
				classRestriction: 5,
				sectionName:      "Druid Masks",
				folder:           "./inventory/head/druid",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/head/uniques",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Bases",
				folder:           "./inventory/head/bases",
			}},
		selectedPath: "",
		d2slotvalue:  1,
	}
	g_SelectedItems["amulet"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/amulet/uniques",
			}},
		selectedPath: "",
		d2slotvalue:  2,
	}
	g_SelectedItems["chest"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/chest/uniques",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Bases",
				folder:           "./inventory/chest/bases",
			}},
		selectedPath: "",
		d2slotvalue:  3,
	}
	g_SelectedItems["mainhand"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 1,
				sectionName:      "Sorceress Orbs",
				folder:           "./inventory/mainhand/sorceress",
			},
			{
				classRestriction: 0,
				sectionName:      "Amazon",
				folder:           "./inventory/mainhand/amazon",
			},
			{
				classRestriction: 6,
				sectionName:      "Assassin",
				folder:           "./inventory/mainhand/assassin",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Axes 1H",
				folder:           "./inventory/mainhand/uniques/axes 1h",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Axes 2H",
				folder:           "./inventory/mainhand/uniques/axes 2h",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Maces 1H",
				folder:           "./inventory/mainhand/uniques/maces 1h",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Maces 2H",
				folder:           "./inventory/mainhand/uniques/maces 2h",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Swords 1H",
				folder:           "./inventory/mainhand/uniques/swords 1h",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Swords 2H",
				folder:           "./inventory/mainhand/uniques/swords 2h",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Bows",
				folder:           "./inventory/mainhand/uniques/bows",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Crossbows",
				folder:           "./inventory/mainhand/uniques/crossbows",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Daggers",
				folder:           "./inventory/mainhand/uniques/daggers",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Polearms",
				folder:           "./inventory/mainhand/uniques/polearms",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Spears",
				folder:           "./inventory/mainhand/uniques/spears",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Staves",
				folder:           "./inventory/mainhand/uniques/staves",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Throwing",
				folder:           "./inventory/mainhand/uniques/staves",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques Wands",
				folder:           "./inventory/mainhand/uniques/staves",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Bases",
				folder:           "./inventory/mainhand/bases",
			}},
		selectedPath: "",
		d2slotvalue:  4,
	}
	g_SelectedItems["offhand"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 3,
				sectionName:      "Paladin Shields",
				folder:           "./inventory/offhand/paladin",
			},
			{
				classRestriction: 2,
				sectionName:      "Necromancer Heads",
				folder:           "./inventory/offhand/necromancer",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/offhand/uniques",
			},
			{
				classRestriction: 0xFF,
				sectionName:      "Bases",
				folder:           "./inventory/offhand/bases",
			}},
		selectedPath: "",
		d2slotvalue:  5,
	}
	g_SelectedItems["leftring"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/ring/uniques",
			}},
		selectedPath: "",
		d2slotvalue:  6,
	}
	g_SelectedItems["rightring"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/ring/uniques",
			}},
		selectedPath: "",
		d2slotvalue:  7,
	}
	g_SelectedItems["belt"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/belt/uniques",
			}},
		selectedPath: "",
		d2slotvalue:  8,
	}
	g_SelectedItems["feet"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/feet/uniques",
			}},
		selectedPath: "",
		d2slotvalue:  9,
	}
	g_SelectedItems["hands"] = &ItemSlot{
		sections: []ItemSection{
			{
				classRestriction: 0xFF,
				sectionName:      "Uniques",
				folder:           "./inventory/hands/uniques",
			}},
		selectedPath: "",
		d2slotvalue:  10,
	}

	ui.Load(fmt.Sprintf("http://%s", ln.Addr()))

	ui.Bind("selectSlot", g_SelectedSlot.selectSlot)
	ui.Bind("selectSlotValue", g_SelectedSlot.Value)
	ui.Bind("getSelectionHtml", g_SelectedSlot.getSelectionHtml)

	g_SelectedClass.value = byte(0) //Amazon

	ui.Bind("selectClass", g_SelectedClass.selectClass)

	ui.Bind("selectItem", selectItem)
	ui.Bind("getItemName", getItemName)

	ui.Bind("saveAs", saveAs)
	ui.Bind("save", save)

	// Wait until the interrupt signal arrives or browser window is closed
	sigc := make(chan os.Signal)
	signal.Notify(sigc, os.Interrupt)
	select {
	case <-sigc:
	case <-ui.Done():
	}

	log.Println("exiting...")
}
